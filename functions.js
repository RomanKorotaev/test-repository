//1. ФУНКЦИИ
/*
function square(Number ) // Функция называется square. Она принимает один аргумент, x.
{ // Здесь начинается тело функции.
return x*x; // Функция возводит свой аргумент в квадрат и возвращает
// полученное значение.
} // Здесь функция заканчивается.

console.log(function square(6) )
*/

/*
const firstName = 'Roman'
const lastName = prompt('Введите фамилию') // функция
alert (firstName +' ' + lastName) //функция -выводит отдельное окошко
document.
document.write (' ...')  // пример функции , что выводит данные на страницу из JavaScript
*/

/*
function square(  x) { return x* x; }

console.log ()

*/

/*
username = prompt("Добро пожаловать!\n Как вас зовут?"); // пример ввода данных в прогу через функцию prompt ()
alert("Привет " + username);

*/


// 2. НЕОБЯЗАТЕЛЬНЫЕ АРНУМЕНТЫ


// Добавить в массив a перечислимые имена свойств объекта o и вернуть массив a.
// Если массив a не указан или равен null, создать и вернуть новый массив a

function copyPropertyNamesToArray(o, /* необязательный */ a)
{
if (!a) a = []; // Если массив не определен или получено
// значение null, создать новый пустой массив a
for(var property in o) a.push(property);
return a;
};

/*
// Получить имена свойств объектов A1 и p
var A1 = {
    year: 2021,
    time: "23:51",
    town:"Kiev"
};


var a2 = copyPropertyNamesToArray(A1); // Получить свойства объекта o
// в виде нового массива
document.write(a2, "<br>"); // 
copyPropertyNamesToArray(A1, a2); // добавить к массиву свойства объекта p
document.write(a2, "<br>"); // 
var testArray = [4, 5];
document.write(testArray, "<br>"); // 
copyPropertyNamesToArray(A1, testArray); 
document.write(testArray, "<br>"); // 

*/


// 3. Списки аргументов переменной длины: объект Arguments
/*
function sumThree (a, b, c)
{
    // Сначала проверяется, правильное ли количество аргументов передано
    if (arguments.length != 3)
      {
        throw new Error("функция f вызвана с " + arguments.length + "аргументами, а требуется 3.");// это сообщение об 
        //ошибке будет отображено в консоле
      }
    return a + b + c;
};

var d = 0, a = 10, b = 20, c = 30;
 d= sumThree(a, b); // ошибочно передано не 3 аргумента , а 2
document.write(d, "<br>"); // 

*/

// 4. JavaScript-функций: они могут быть написаны таким образом, чтобы работать с 
//любым количеством аргументов.

function max(/*...*/)
{
    var m = Number.NEGATIVE_INFINITY;   // NEGATIVE_INFINITY - это зарезервированное свойство 
    //объекта Number, которое представляет из себя нименьшее возможное число в JavaScript.
    // В данном примере используется как счётчик/стартовое наименьшее число с которым сравниваем для поиска больших
// Цикл по всем аргументам, поиск и сохранение наибольшего из них
for(var i = 0; i < arguments.length; i++)
if (arguments[i] > m) m = arguments[i];
// Возвращаем максимальный
return m;
}
var largest = max(1, 10, 100, 2, 3, 1000, 4, 5, 10000, 6);

document.write(largest, "<br>"); // 


// 5.  
/*
function f(x) {
print(x); // Выводит начальное значение аргумента
arguments[0] = null; // Изменяя элементы массива, мы также изменяем x
print(x); // Теперь выводит "null"
}
*/

//6. ОБЪЕКТ arguments – это специальное свойство объекта вызова, ссылающееся на объект, известный
//как объект Arguments. Объект Arguments – это нечто вроде массива (см. раздел 7.8),
//позволяющего извлекать переданные функции значения по номеру, а не по имени.

/*
объекта Arguments есть одна очень необычная особенность. Когда у функции име
ются именованные аргументы, элементы массива объекта Arguments являются си
нонимами локальных переменных, содержащих аргументы функции. Массив ar
guments[] и именованные аргументы – это два разных средства обращения к одной
переменной. Изменение значения аргумента через имя аргумента меняет значе
ние, извлекаемое через массив arguments[]. Изменение значения аргумента через
массив arguments[] меняет значение, извлекаемое по имени аргумента. Например:
*/

/*
function sumThree (a, b, c)
{
    // Сначала проверяется, правильное ли количество аргументов передано
    if (arguments.length != 3)
      {
        throw new Error("функция f вызвана с " + arguments.length + "аргументами, а требуется 3.");// это сообщение об 
        //ошибке будет отображено в консоле
    }
    arguments[2] = null;
    return a + b + c;
};

var d = 0, a = 10, b = 20, c = 30;
 d= sumThree(a, b, c);
document.write(d, "<br>");

*/

// 7.  СВОЙСТВО callee  ОБЪЕКТА  Arguments
/* 
Свойство callee
Помимо элементов своего массива объект Arguments определяет свойство callee,
ссылающееся на исполняемую в данный момент функцию. Его можно использо
вать, например, для рекурсивного вызова неименованных функций. Вот пример
неименованного функционального литерала, вычисляющего факториал:

function(x) {
if (x <= 1) return 1;
return x * arguments.callee(x  1);
}
*/
